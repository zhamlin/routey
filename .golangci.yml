# Defines the configuration version.
# The only possible value is "2".
version: "2"

linters:
  # Default set of linters.
  # The value can be:
  # - `standard`: https://golangci-lint.run/usage/linters/#enabled-by-default
  # - `all`: enables all linters by default.
  # - `none`: disables all linters by default.
  # - `fast`: enables only linters considered as "fast" (`golangci-lint help linters --json | jq '[ .[] | select(.fast==true) ] | map(.name)'`).
  # Default: standard
  default: all
  # Enable specific linter.
  enable:
    - asasalint
    - asciicheck
    - bidichk
    - bodyclose
    - canonicalheader
    - containedctx
    - contextcheck
    - copyloopvar
    - cyclop
    - decorder
    - depguard
    - dogsled
    - dupl
    - dupword
    - durationcheck
    - err113
    - errcheck
    - errchkjson
    - errname
    - errorlint
    - exptostd
    - fatcontext
    - forbidigo
    - forcetypeassert
    - funcorder
    - funlen
    - ginkgolinter
    - gocheckcompilerdirectives
    - gochecknoinits
    - gochecksumtype
    - gocognit
    - goconst
    - gocritic
    - gocyclo
    - godot
    - godox
    - goheader
    - gomoddirectives
    - gomodguard
    - goprintffuncname
    - gosec
    - gosmopolitan
    - govet
    - grouper
    - iface
    - importas
    - ineffassign
    - interfacebloat
    - intrange
    - ireturn
    - lll
    - loggercheck
    - maintidx
    - makezero
    - mirror
    - misspell
    - mnd
    - musttag
    - nakedret
    - nestif
    - nilerr
    - nilnesserr
    - nilnil
    - noctx
    - nolintlint
    - nonamedreturns
    - nosprintfhostport
    - perfsprint
    - prealloc
    - predeclared
    - promlinter
    - protogetter
    - reassign
    - recvcheck
    - revive
    - rowserrcheck
    - sloglint
    - spancheck
    - sqlclosecheck
    - staticcheck
    - tagalign
    - tagliatelle
    - testableexamples
    - testifylint
    - testpackage
    - thelper
    - tparallel
    - unconvert
    - unparam
    - unused
    - usestdlibvars
    - usetesting
    - varnamelen
    - wastedassign
    - whitespace
    - wrapcheck
    - wsl
    - zerologlint
  # Disable specific linter.
  disable:
    - inamedparam
    - nlreturn
    - paralleltest
    - exhaustruct
    - gochecknoglobals # Until read only use is supported ignore
    - exhaustive
  # All available settings of specific linters.
  settings:
    mnd:
      ignored-numbers:
        - '2'
    revive:
      # Sets the default severity.
      # See https://github.com/mgechev/revive#configuration
      # Default: warning
      severity: error
      rules:
        # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#var-naming
        - name: var-naming
          severity: warning
          disabled: false
          exclude: [""]
          arguments:
            - ["ID", "JSON"] # AllowList
            - ["VM"] # DenyList
            - - upper-case-const: true # Extra parameter (upper-case-const|skip-package-name-checks)
    # See the dedicated "linters.settings" documentation section.
    depguard:
      rules:
        Main:
          files:
            - $all
          allow:
            - $gostd
            - github.com/zhamlin/routey
            - github.com/nsf/jsondiff
            - github.com/sv-tools/openapi
            - github.com/santhosh-tekuri/jsonschema/v6
    wrapcheck:
      extra-ignore-sigs:
        - .UnmarshalText(
        - cmp.Or[
      # An array of strings that specify globs of packages to ignore.
      # Default: []
      ignore-package-globs:
        - encoding/*
        - strconv
    wsl:
      allow-cuddle-declarations: true
      allow-cuddle-used-in-block: true
      allow-assign-and-anything: true
    varnamelen:
      max-distance: 30
      check-receiver: false
      ignore-decls:
        - r *Router
        - p Parameter
      ignore-names:
        - err
        - sb
    tagliatelle:
      case:
        rules:
          json: snake
  # Defines a set of rules to ignore issues.
  # It does not skip the analysis, and so does not ignore "typecheck" errors.
  exclusions:
    # Mode of the generated files analysis.
    #
    # - `strict`: sources are excluded by strictly following the Go generated file convention.
    #    Source files that have lines matching only the following regular expression will be excluded: `^// Code generated .* DO NOT EDIT\.$`
    #    This line must appear before the first non-comment, non-blank text in the file.
    #    https://go.dev/s/generatedcode
    # - `lax`: sources are excluded if they contain lines like `autogenerated file`, `code generated`, `do not edit`, etc.
    # - `disable`: disable the generated files exclusion.
    #
    # Default: strict
    generated: lax
    # Log a warning if an exclusion rule is unused.
    # Default: false
    warn-unused: true
    # Predefined exclusion rules.
    # Default: []
    presets:
      - comments
      - std-error-handling
      - common-false-positives
      - legacy
    # Excluding configuration per-path, per-linter, per-text and per-source.
    rules:
      # Exclude some linters from running on tests files.
      - path: _test\.go
        linters:
          - gocyclo
          - errcheck
          - dupl
          - gosec
          - varnamelen
          - perfsprint
          - nilnil
          - exhaustruct
          - unparam
          - funlen
          - tagalign
          - goconst
      - path: _test\.go
        text: "do not define dynamic errors, use wrapped static errors instead"
        linters:
          - err113
      # Run some linter only for test files by excluding its issues for everything else.
      - path-except: _test\.go
        linters:
          - forbidigo
      - path: extractor/extractor\.go
        linters:
          - forcetypeassert
          - gochecknoglobals
      - path: errors\.go
        linters:
          - forcetypeassert
          - gochecknoglobals
      # Exclude known linters from partially hard-vendored code,
      # which is impossible to exclude via `nolint` comments.
      # `/` will be replaced by the current OS file path separator to properly work on Windows.
      - path: internal/hmac/
        text: "weak cryptographic primitive"
        linters:
          - gosec
      # Exclude some `staticcheck` messages.
      - linters:
          - staticcheck
        text: "SA9003:"
      # Exclude `lll` issues for long lines with `go:generate`.
      - linters:
          - lll
        source: "^//go:generate "
      - linters:
          - wsl
        text: "assignments should only be cuddled with other assignments"
      - linters:
          - wsl
        text: "return statements should not be cuddled if block has more than two lines"
      - linters:
          - wsl
        text: "only cuddled expressions if assigning variable or using from line above"

    # Which file paths to exclude: they will be analyzed, but issues from them won't be reported.
    # "/" will be replaced by the current OS file path separator to properly work on Windows.
    # Default: []
    paths:
      # - ".*\\.my\\.go$"
      # - lib/bad.go
    # Which file paths to not exclude.
    # Default: []
    paths-except:

formatters:
  # Enable specific formatter.
  # Default: [] (uses standard Go formatting)
  enable:
    - gci
    - gofmt
    - goimports
    - golines
    # - gofumpt
  # Formatters settings.
  settings:
    gofmt:
      rewrite-rules:
        - pattern: 'interface{}'
          replacement: 'any'
  exclusions:
    # Log a warning if an exclusion path is unused.
    # Default: false
    warn-unused: true
    # Mode of the generated files analysis.
    #
    # - `strict`: sources are excluded by strictly following the Go generated file convention.
    #    Source files that have lines matching only the following regular expression will be excluded: `^// Code generated .* DO NOT EDIT\.$`
    #    This line must appear before the first non-comment, non-blank text in the file.
    #    https://go.dev/s/generatedcode
    # - `lax`: sources are excluded if they contain lines like `autogenerated file`, `code generated`, `do not edit`, etc.
    # - `disable`: disable the generated files exclusion.
    #
    # Default: lax
    generated: strict
    # Which file paths to exclude.
    # Default: []
    paths:
      - ".*\\.my\\.go$"
      - lib/bad.go
